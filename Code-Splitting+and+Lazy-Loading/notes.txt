we can import component lazyily like this
const Home = lazy(() => import("./components/home"));
const About = lazy(() => import("./components/about"));
const Contact = lazy(() => import("./components/contact"));


then we can wrap this in suspense with the lodaer or what ever fallback

function App() {
  return (
    <AppContainer>
      <Heading>Advanced React - Codelicks Academy</Heading>
      <NavContainer>
        <Nav>
          <Link to="/">Home</Link>
          <Link to="/about">About</Link>
          <Link to="/contact">Contact</Link>
        </Nav>
      </NavContainer>
      <Suspense fallback={<h3>lOADING....</h3>}>
        <Routes>
          <Route path="/" element={<Home />} />
          <Route path="/about" element={<About />} />
          <Route path="/contact" element={<Contact />} />
        </Routes>
      </Suspense>
    </AppContainer>
  );
}

HERE WE CAN avoid flickering loader ig thre loading of comppnent takes only a minimum amount of time which means we can hide the loader for this but keeping lazy loding 
likr this

import { useEffect, useState } from "react";

const LazyLoader = ({ show = false, delay = 0 }) => {
  const [showLoader, setShowLoader] = useState(false);
  useEffect(() => {
    let timeout;
    if (!show) {
      setShowLoader(false);
      return;
    }
    if (delay === 0) {
      setShowLoader(true);
    } else {
      timeout = setTimeout(() => setShowLoader(true), delay);
    }
    return () => {
      clearInterval(timeout);
    };
  }, [show, delay]);

  return showLoader ? <h3>Loading...</h3> : null;
};

export default LazyLoader;

and then we can pass it klike this in the suspense 
  <Suspense fallback={<LazyLoader show delay={500} />}>
        <Routes>
          <Route path="/" element={<Home />} />
          <Route path="/about" element={<About />} />
          <Route path="/contact" element={<Contact />} />
        </Routes>
      </Suspense>